/* browser.js v1.0.1 | @ajlkn | MIT licensed */

var browser = (function() {
    "use strict";

    var t = {
        name: null,
        version: null,
        os: null,
        osVersion: null,
        touch: null,
        mobile: null,
        _canUse: null,

        // Function to check if a specific CSS property can be used
        canUse: function(e) {
            // Create a div element if not already created
            t._canUse = t._canUse || document.createElement("div");
            var n = t._canUse.style,
                r = e.charAt(0).toUpperCase() + e.slice(1); // Capitalize first letter

            // Check for property with and without vendor prefixes
            return e in n || 
                   "Moz" + r in n || 
                   "Webkit" + r in n || 
                   "O" + r in n || 
                   "ms" + r in n;
        },

        // Initialization function
        init: function() {
            var e = navigator.userAgent,
                n = "other",  // Default browser name
                r = 0,        // Default version number
                // Array of browser name and version matching patterns
                i = [
                    ["firefox", /Firefox\/([0-9\.]+)/],
                    ["bb", /BlackBerry.+Version\/([0-9\.]+)/],
                    ["bb", /BB[0-9]+.+Version\/([0-9\.]+)/],
                    ["opera", /OPR\/([0-9\.]+)/],
                    ["opera", /Opera\/([0-9\.]+)/],
                    ["edge", /Edge\/([0-9\.]+)/],
                    ["safari", /Version\/([0-9\.]+).+Safari/],
                    ["chrome", /Chrome\/([0-9\.]+)/],
                    ["ie", /MSIE ([0-9]+)/],
                    ["ie", /Trident\/.+rv:([0-9]+)/]
                ];

            // Loop through browser patterns to detect browser name and version
            for (var o = 0; o < i.length; o++) {
                if (e.match(i[o][1])) {
                    n = i[o][0];
                    r = parseFloat(RegExp.$1);
                    break;
                }
            }

            // Set detected browser name and version
            t.name = n;
            t.version = r;

            // Reset to detect operating system
            n = "other";
            r = 0;

            // Array of OS name and version matching patterns
            i = [
                ["ios", /([0-9_]+) like Mac OS X/, function(e) { return e.replace("_", ".").replace("_", ""); }],
                ["ios", /CPU like Mac OS X/, function(e) { return 0; }],
                ["wp", /Windows Phone ([0-9\.]+)/, null],
                ["android", /Android ([0-9\.]+)/, null],
                ["mac", /Macintosh.+Mac OS X ([0-9_]+)/, function(e) { return e.replace("_", ".").replace("_", ""); }],
                ["windows", /Windows NT ([0-9\.]+)/, null],
                ["bb", /BlackBerry.+Version\/([0-9\.]+)/, null],
                ["bb", /BB[0-9]+.+Version\/([0-9\.]+)/, null],
                ["linux", /Linux/, null],
                ["bsd", /BSD/, null],
                ["unix", /X11/, null]
            ];

            // Loop through OS patterns to detect OS name and version
            for (o = 0; o < i.length; o++) {
                if (e.match(i[o][1])) {
                    n = i[o][0];
                    r = parseFloat(i[o][2] ? i[o][2](RegExp.$1) : RegExp.$1);
                    break;
                }
            }

            // Special case for certain iOS devices
            if (n == "mac" && "ontouchstart" in window && (
                (screen.width == 1024 && screen.height == 1366) ||
                (screen.width == 834 && screen.height == 1112) ||
                (screen.width == 810 && screen.height == 1080) ||
                (screen.width == 768 && screen.height == 1024)
            )) {
                n = "ios";
            }

            // Set detected OS name and version
            t.os = n;
            t.osVersion = r;

            // Detect touch capability
            t.touch = (t.os == "wp") ? navigator.msMaxTouchPoints > 0 : !!("ontouchstart" in window);

            // Determine if the device is mobile
            t.mobile = (t.os == "wp" || t.os == "android" || t.os == "ios" || t.os == "bb");
        }
    };

    // Initialize browser detection
    t.init();

    // Return the object with all detected information
    return t;
})();

// Module export compatibility with AMD, CommonJS, and global variable
(function(e, n) {
    if (typeof define === "function" && define.amd) {
        define([], n);
    } else if (typeof exports === "object") {
        module.exports = n();
    } else {
        e.browser = n();
    }
}(this, function() {
    return browser;
}));
